

// Nothing here!
// Highly recommend you look at stdin_echo.cpp for getting started.
// The lecure example code (and the specification for this assignment) are also good to read.

#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <unistd.h> // for fork, execvp
#include <cstring> // for strerror
#include <sys/types.h>
#include <sys/wait.h>

using std::cout;
using std::cin;
using std::cerr;
using std::endl;
using std::string;
using std::getline;
using std::vector;

bool is_int(char c){
	if (c >= '0' && c <= '9'){
		return true;
	}
	return false;
}


int validate_argument(int argc, char** argv){
	// 0 Retry Case
	if (argc == 1){
		return 0;
	}

	// Invalid number of input arguments (more than 1)
	if (argc != 2){
		return -1;
	}

	char* curr_char = argv[1];
	int sum = 0;

	while (*curr_char != '\0'){
		if (!is_int(*curr_char)){
			// Invalid character. Only integers!
			return -1;
		}
		sum *= 10;
		sum += *curr_char - '0';
		curr_char++;

	}

	return sum;
}


size_t find_first_of(const string& str, const string& dilim, size_t pos) {

         if (pos < 0 || pos >= str.size()) {
		 cerr << "[find_first_of] Index out of range" << endl; 
		 return -1;
         }

         while (pos < str.size()){
                 for (auto it = dilim.begin(); it != dilim.end(); it++){
                         if (str.at(pos) == *it){
                                 return pos;
                         }

                 }
                 pos++;
         }
         return -1;
}


// Test function for find_first_of
void find_first_of_test(){
	int res;
	string st1 = "aa bb";
	string dilim1 = " ";
	res = find_first_of(st1, dilim1, 0);
	cout << res << endl;

	res = find_first_of(st1, dilim1, 3);
	cout << res << endl;

	st1 = "aa\tbb\n";
	dilim1 = " \t";
	res = find_first_of(st1, dilim1, 0);
	cout << res << endl;

	dilim1 = "\t \n";
	res = find_first_of(st1, dilim1, 3);
	cout << res << endl;
}


vector<string> split(const string& str, const string& dilim) {
	vector<string> res {};
	size_t prev = 0, curr;

	while (prev < str.size()){
		curr = find_first_of(str, dilim, prev);
		if (curr == string::npos){
			break;
		}

		if (prev < curr) {
			res.push_back(str.substr(prev, curr - prev));
		}

		prev = curr + 1;
	}

	if (prev < str.size()){
		res.push_back(str.substr(prev, curr - prev));
	}

	return res;
}


vector<char*> convert_to_cstring(vector<string> src){
	vector<char*> res;
	for (auto& str: src){
		res.push_back(str.data());
	}
	res.push_back(nullptr);
	return res;
}


int main(int argc, char** argv){
	// Validate arguments 
	int retry_cnt = validate_argument(argc, argv);
	if (retry_cnt < 0){
		cerr << "Invalid argument error." << endl;
		return EXIT_FAILURE;
	}

	//cout << "retry_cnt : " << retry_cnt << endl;
			
	string line;

	while (true){
		cout << "$ ";

		if (!getline(cin, line)) {
			if (!cin.eof()){
				cerr << "Warning: fatal error while reading input from user" << endl;
			}
			// ctrl + D
			cout << endl;
			break;
		// Explixt exit command
		} else if (line == "exit"){
			break;
		}

		
		cout << "Input command : " << line << endl;
		vector<string> string_cmd = split(line, " \t\n");
		vector<char*> cstr_cmd = convert_to_cstring(string_cmd);
		for (auto c: cstr_cmd){
			if (c == nullptr){
				break;
			}
			cout << c << endl;
		}


		pid_t cpid = fork();

		if (cpid == 0){
			cout << "Child Process!" << endl;
			//execvp(user_command.at(0), const_cast<char**>(user_command.data()));
			sleep(3);

			cout << "Child Failed!" << endl;
		} else if (cpid < 0) {
			cerr << "Fork failure." << endl;
			return EXIT_FAILURE;
		}

		int status;
		pid_t wpid = wait(&status);

		if (WIFEXITED(status)) {
			cout << "Child finished." << endl;
		}
		cout << "Parent end!" << endl;



	}

	return EXIT_SUCCESS; 
}

